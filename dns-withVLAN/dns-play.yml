# Experiments in Ansible
# At this point, the RP4 has a DHCP defined IP coming over from
# UniFi.
# The machine is running bookwork.
# SSH, VNC are enabled
# fedavis is the primary user
# ansiuser2 is a user defined to be able to run ansible commands
# fedavis and ansiuser2 are in sudo, with NOPASSWD
#
# Tasks:
#    1.   Add repo for brave
#    2.   Install dnsutils, dnsmasq, vim, curl, apt-transport-https, brave-browser
#    3.   Drop all the vlans from the dictionary vlans in "dns-play-variables.yml"
#
- hosts: dnsvlan1dhcp
  become: yes
  vars_files:
    - dns-play-variables.yml    
  tasks:
    # We are going to add the repo key for brave 
    - name: Add the brave rep  key
      ansible.builtin.shell: 
        curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

# Install dnsutils, dnsmasq, vim
    - name: Install dnsutils, dnsmasq, vim
      apt:
        state: latest
        update_cache: true
        pkg:
        - dnsutils
        - dnsmasq
        - vim
        - apt-transport-https
        - curl
        - brave-browser
## Display dictionary elements from a list of VLAN
#    - name: Display VLAN info
#      debug:
#        msg: "nmcli con add type vlan con-name {{ item.con_name }} dev {{ item.dev }} id {{ item.id }} {{ item.iptype }} {{ item.ipaddr }} {{ item.gwtype }} {{ item.gwaddr }}"
#      loop: "{{ vlans }}" 


## Delete the VLAN id
#    - name: Delete the VLAN id
#      nmcli:
#        type: vlan
#        conn_name: "VLAN{{ item }}" 
#        state: 'absent'
#      loop:
#        - 74

# Drop all the VLANs in the list
    - name: Drop the VLAN list
      nmcli:
        type: vlan
        conn_name: "{{ item.con_name }}"
        state: 'absent'
      loop: "{{ vlans }}"
          
# Delete the wired connection,  add the connection, restart
    - name: Drop dynamic wired connection, add static wired connection, set IP and GW
      shell: "nmcli con del \"Wired connection 1\"; nmcli connection add type ethernet con-name \"Wired connection 1\" ifname eth0;nmcli c mod \"Wired connection 1\" ip4 {{ item.host_static }}/16 gw4 10.1.0.1"
      loop: "{{ dnsHosts }}"
      args:
        executable: /bin/bash
      async: 100
      poll: 0
# Restart the connection
    - name: Restart static connection
      shell: "nmcli c down \"Wired connection 1\" | nmcli c up \"Wired connection 1\""
      args:
        executable: /bin/bash
      async: 100
      poll: 0
# Restart the connection
#    - name: Restart networking service
#      service:
#        name: networking
#        state: restarted
          
    - name: set_fact for the nodes' new IP address
      set_fact:
        ansible_host: "{{ item.host_static }}"
      loop: "{{ dnsHosts }}"
#    - name: wait_for ssh port access
#      local_action:
#        module: wait_for
#        host: "{{ ansible_host }}"
#        port: 22
#        delay: 3
#        timeout: 20
#        state: started
#      register: network_responding
    - name: Wait for SSH to come back
      wait_for_connection:
        delay: 5
        timeout: 60

# Ping the new static IP
    - name: Ping the static address {{ ansible_host }}
      ansible.builtin.ping: 

# Display dictionary elements from a list of VLAN
    - name: Display remapped ansible_host
      debug:
        msg: "ansible_host={{ ansible_host }}"

#
# Create the VLANs
    - name: Create VLANs
      shell: "nmcli con add type vlan con-name {{ item.con_name }} dev {{ item.dev }} id {{ item.id }} {{ item.iptype }} {{ item.ipaddr }} {{ item.gwtype }} {{ item. gwaddr }}"
      loop: "{{ vlans }}"
      args:
        executable: /bin/bash
      async: 100
      poll: 0

# Restart the connection
    - name: Restart networking service
      service:
        name: networking
        state: restarted
